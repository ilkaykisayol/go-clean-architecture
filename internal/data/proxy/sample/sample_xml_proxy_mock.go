// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/data/proxy/sample/sample_xml_proxy.go

// Package sample is a generated GoMock package.
package sample

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISampleXmlProxy is a mock of ISampleXmlProxy interface.
type MockISampleXmlProxy struct {
	ctrl     *gomock.Controller
	recorder *MockISampleXmlProxyMockRecorder
}

// MockISampleXmlProxyMockRecorder is the mock recorder for MockISampleXmlProxy.
type MockISampleXmlProxyMockRecorder struct {
	mock *MockISampleXmlProxy
}

// NewMockISampleXmlProxy creates a new mock instance.
func NewMockISampleXmlProxy(ctrl *gomock.Controller) *MockISampleXmlProxy {
	mock := &MockISampleXmlProxy{ctrl: ctrl}
	mock.recorder = &MockISampleXmlProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISampleXmlProxy) EXPECT() *MockISampleXmlProxyMockRecorder {
	return m.recorder
}

// PostSampleXml mocks base method.
func (m *MockISampleXmlProxy) PostSampleXml(ch chan *PostSampleXmlProxyResponse, model *PostSampleXmlProxyModel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostSampleXml", ch, model)
}

// PostSampleXml indicates an expected call of PostSampleXml.
func (mr *MockISampleXmlProxyMockRecorder) PostSampleXml(ch, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSampleXml", reflect.TypeOf((*MockISampleXmlProxy)(nil).PostSampleXml), ch, model)
}
